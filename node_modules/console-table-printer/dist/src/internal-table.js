"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const internal_table_printer_1 = require("./internal-table-printer");
const table_constants_1 = require("./table-constants");
const table_helpers_1 = require("./table-helpers");
class TableInternal {
    constructor(options) {
        // default construction
        this.rows = [];
        this.columns = [];
        this.tableStyle = table_constants_1.TABLE_STYLE.thinBorder;
        this.style = table_constants_1.TABLE_BORDER_STYLES.thinBorder;
        if (options instanceof Array) {
            this.initSimple(options);
        }
        else if (typeof options === 'object') {
            this.initDetailed(options);
        }
    }
    initSimple(columns) {
        this.columns = columns.map(column => ({
            name: column,
            alignment: table_constants_1.COLUMN_ALIGNMENT.right,
        }));
    }
    initDetailed(options) {
        var _a;
        this.tableStyle =
            ((options === null || options === void 0 ? void 0 : options.style) && table_constants_1.TABLE_STYLE[options.style]) ||
                table_constants_1.TABLE_STYLE.thinBorder;
        this.columns =
            ((_a = options.columns) === null || _a === void 0 ? void 0 : _a.map(column => ({
                name: column.name,
                alignment: table_constants_1.COLUMN_ALIGNMENT[column.alignment || table_constants_1.COLUMN_ALIGNMENT.right],
            }))) || [];
    }
    createColumnFromRow(text) {
        const colNames = this.columns.map(col => col.name);
        for (let key in text) {
            if (!colNames.includes(key)) {
                this.columns.push(table_helpers_1.createColum(key));
            }
        }
    }
    addColumn(text) {
        this.columns.push(table_helpers_1.createColum(text));
    }
    addColumns(toBeInsertedColumns) {
        for (let toBeInsertedColumn of toBeInsertedColumns) {
            this.addColumn(toBeInsertedColumn);
        }
    }
    addRow(text, options) {
        this.createColumnFromRow(text);
        this.rows.push(table_helpers_1.createRow((options === null || options === void 0 ? void 0 : options.color) || table_constants_1.COLOR.white, text));
    }
    addRows(toBeInsertedRows) {
        for (let toBeInsertedRow of toBeInsertedRows) {
            this.addRow(toBeInsertedRow, undefined);
        }
    }
    printTable() {
        return internal_table_printer_1.printTable(this);
    }
}
exports.TableInternal = TableInternal;
